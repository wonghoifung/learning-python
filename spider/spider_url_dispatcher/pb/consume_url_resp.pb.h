// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consume_url_resp.proto

#ifndef PROTOBUF_consume_5furl_5fresp_2eproto__INCLUDED
#define PROTOBUF_consume_5furl_5fresp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace spider {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_consume_5furl_5fresp_2eproto();
void protobuf_AssignDesc_consume_5furl_5fresp_2eproto();
void protobuf_ShutdownFile_consume_5furl_5fresp_2eproto();

class consume_url_resp;

// ===================================================================

class consume_url_resp : public ::google::protobuf::Message {
 public:
  consume_url_resp();
  virtual ~consume_url_resp();

  consume_url_resp(const consume_url_resp& from);

  inline consume_url_resp& operator=(const consume_url_resp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const consume_url_resp& default_instance();

  void Swap(consume_url_resp* other);

  // implements Message ----------------------------------------------

  inline consume_url_resp* New() const { return New(NULL); }

  consume_url_resp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const consume_url_resp& from);
  void MergeFrom(const consume_url_resp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(consume_url_resp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 res = 1;
  bool has_res() const;
  void clear_res();
  static const int kResFieldNumber = 1;
  ::google::protobuf::int32 res() const;
  void set_res(::google::protobuf::int32 value);

  // repeated string failed_urls = 2;
  int failed_urls_size() const;
  void clear_failed_urls();
  static const int kFailedUrlsFieldNumber = 2;
  const ::std::string& failed_urls(int index) const;
  ::std::string* mutable_failed_urls(int index);
  void set_failed_urls(int index, const ::std::string& value);
  void set_failed_urls(int index, const char* value);
  void set_failed_urls(int index, const char* value, size_t size);
  ::std::string* add_failed_urls();
  void add_failed_urls(const ::std::string& value);
  void add_failed_urls(const char* value);
  void add_failed_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& failed_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_failed_urls();

  // repeated string success_urls = 3;
  int success_urls_size() const;
  void clear_success_urls();
  static const int kSuccessUrlsFieldNumber = 3;
  const ::std::string& success_urls(int index) const;
  ::std::string* mutable_success_urls(int index);
  void set_success_urls(int index, const ::std::string& value);
  void set_success_urls(int index, const char* value);
  void set_success_urls(int index, const char* value, size_t size);
  ::std::string* add_success_urls();
  void add_success_urls(const ::std::string& value);
  void add_success_urls(const char* value);
  void add_success_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& success_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_success_urls();

  // @@protoc_insertion_point(class_scope:spider.consume_url_resp)
 private:
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> failed_urls_;
  ::google::protobuf::RepeatedPtrField< ::std::string> success_urls_;
  ::google::protobuf::int32 res_;
  friend void  protobuf_AddDesc_consume_5furl_5fresp_2eproto();
  friend void protobuf_AssignDesc_consume_5furl_5fresp_2eproto();
  friend void protobuf_ShutdownFile_consume_5furl_5fresp_2eproto();

  void InitAsDefaultInstance();
  static consume_url_resp* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// consume_url_resp

// required int32 res = 1;
inline bool consume_url_resp::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void consume_url_resp::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void consume_url_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void consume_url_resp::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 consume_url_resp::res() const {
  // @@protoc_insertion_point(field_get:spider.consume_url_resp.res)
  return res_;
}
inline void consume_url_resp::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
  // @@protoc_insertion_point(field_set:spider.consume_url_resp.res)
}

// repeated string failed_urls = 2;
inline int consume_url_resp::failed_urls_size() const {
  return failed_urls_.size();
}
inline void consume_url_resp::clear_failed_urls() {
  failed_urls_.Clear();
}
inline const ::std::string& consume_url_resp::failed_urls(int index) const {
  // @@protoc_insertion_point(field_get:spider.consume_url_resp.failed_urls)
  return failed_urls_.Get(index);
}
inline ::std::string* consume_url_resp::mutable_failed_urls(int index) {
  // @@protoc_insertion_point(field_mutable:spider.consume_url_resp.failed_urls)
  return failed_urls_.Mutable(index);
}
inline void consume_url_resp::set_failed_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:spider.consume_url_resp.failed_urls)
  failed_urls_.Mutable(index)->assign(value);
}
inline void consume_url_resp::set_failed_urls(int index, const char* value) {
  failed_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spider.consume_url_resp.failed_urls)
}
inline void consume_url_resp::set_failed_urls(int index, const char* value, size_t size) {
  failed_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spider.consume_url_resp.failed_urls)
}
inline ::std::string* consume_url_resp::add_failed_urls() {
  return failed_urls_.Add();
}
inline void consume_url_resp::add_failed_urls(const ::std::string& value) {
  failed_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spider.consume_url_resp.failed_urls)
}
inline void consume_url_resp::add_failed_urls(const char* value) {
  failed_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spider.consume_url_resp.failed_urls)
}
inline void consume_url_resp::add_failed_urls(const char* value, size_t size) {
  failed_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spider.consume_url_resp.failed_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
consume_url_resp::failed_urls() const {
  // @@protoc_insertion_point(field_list:spider.consume_url_resp.failed_urls)
  return failed_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
consume_url_resp::mutable_failed_urls() {
  // @@protoc_insertion_point(field_mutable_list:spider.consume_url_resp.failed_urls)
  return &failed_urls_;
}

// repeated string success_urls = 3;
inline int consume_url_resp::success_urls_size() const {
  return success_urls_.size();
}
inline void consume_url_resp::clear_success_urls() {
  success_urls_.Clear();
}
inline const ::std::string& consume_url_resp::success_urls(int index) const {
  // @@protoc_insertion_point(field_get:spider.consume_url_resp.success_urls)
  return success_urls_.Get(index);
}
inline ::std::string* consume_url_resp::mutable_success_urls(int index) {
  // @@protoc_insertion_point(field_mutable:spider.consume_url_resp.success_urls)
  return success_urls_.Mutable(index);
}
inline void consume_url_resp::set_success_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:spider.consume_url_resp.success_urls)
  success_urls_.Mutable(index)->assign(value);
}
inline void consume_url_resp::set_success_urls(int index, const char* value) {
  success_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spider.consume_url_resp.success_urls)
}
inline void consume_url_resp::set_success_urls(int index, const char* value, size_t size) {
  success_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spider.consume_url_resp.success_urls)
}
inline ::std::string* consume_url_resp::add_success_urls() {
  return success_urls_.Add();
}
inline void consume_url_resp::add_success_urls(const ::std::string& value) {
  success_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spider.consume_url_resp.success_urls)
}
inline void consume_url_resp::add_success_urls(const char* value) {
  success_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spider.consume_url_resp.success_urls)
}
inline void consume_url_resp::add_success_urls(const char* value, size_t size) {
  success_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spider.consume_url_resp.success_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
consume_url_resp::success_urls() const {
  // @@protoc_insertion_point(field_list:spider.consume_url_resp.success_urls)
  return success_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
consume_url_resp::mutable_success_urls() {
  // @@protoc_insertion_point(field_mutable_list:spider.consume_url_resp.success_urls)
  return &success_urls_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace spider

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_consume_5furl_5fresp_2eproto__INCLUDED
