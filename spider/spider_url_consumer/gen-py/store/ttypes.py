#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class movie_info:
  """
  Attributes:
   - url
   - movienum
   - initial_release_date
   - big_poster
   - small_poster
   - language
   - area
   - scriptwriter
   - actor
   - director
   - source
   - imdb
   - year
   - genre
   - runtime
   - moviename
   - otherName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    (2, TType.STRING, 'movienum', None, None, ), # 2
    (3, TType.STRING, 'initial_release_date', None, None, ), # 3
    (4, TType.STRING, 'big_poster', None, None, ), # 4
    (5, TType.STRING, 'small_poster', None, None, ), # 5
    (6, TType.STRING, 'language', None, None, ), # 6
    (7, TType.STRING, 'area', None, None, ), # 7
    (8, TType.STRING, 'scriptwriter', None, None, ), # 8
    (9, TType.STRING, 'actor', None, None, ), # 9
    (10, TType.STRING, 'director', None, None, ), # 10
    (11, TType.STRING, 'source', None, None, ), # 11
    (12, TType.STRING, 'imdb', None, None, ), # 12
    (13, TType.STRING, 'year', None, None, ), # 13
    (14, TType.STRING, 'genre', None, None, ), # 14
    (15, TType.STRING, 'runtime', None, None, ), # 15
    (16, TType.STRING, 'moviename', None, None, ), # 16
    (17, TType.STRING, 'otherName', None, None, ), # 17
  )

  def __init__(self, url=None, movienum=None, initial_release_date=None, big_poster=None, small_poster=None, language=None, area=None, scriptwriter=None, actor=None, director=None, source=None, imdb=None, year=None, genre=None, runtime=None, moviename=None, otherName=None,):
    self.url = url
    self.movienum = movienum
    self.initial_release_date = initial_release_date
    self.big_poster = big_poster
    self.small_poster = small_poster
    self.language = language
    self.area = area
    self.scriptwriter = scriptwriter
    self.actor = actor
    self.director = director
    self.source = source
    self.imdb = imdb
    self.year = year
    self.genre = genre
    self.runtime = runtime
    self.moviename = moviename
    self.otherName = otherName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.movienum = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.initial_release_date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.big_poster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.small_poster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.language = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.area = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.scriptwriter = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.actor = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.director = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.imdb = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.year = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.genre = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.runtime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.moviename = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.otherName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('movie_info')
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.movienum is not None:
      oprot.writeFieldBegin('movienum', TType.STRING, 2)
      oprot.writeString(self.movienum)
      oprot.writeFieldEnd()
    if self.initial_release_date is not None:
      oprot.writeFieldBegin('initial_release_date', TType.STRING, 3)
      oprot.writeString(self.initial_release_date)
      oprot.writeFieldEnd()
    if self.big_poster is not None:
      oprot.writeFieldBegin('big_poster', TType.STRING, 4)
      oprot.writeString(self.big_poster)
      oprot.writeFieldEnd()
    if self.small_poster is not None:
      oprot.writeFieldBegin('small_poster', TType.STRING, 5)
      oprot.writeString(self.small_poster)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.STRING, 6)
      oprot.writeString(self.language)
      oprot.writeFieldEnd()
    if self.area is not None:
      oprot.writeFieldBegin('area', TType.STRING, 7)
      oprot.writeString(self.area)
      oprot.writeFieldEnd()
    if self.scriptwriter is not None:
      oprot.writeFieldBegin('scriptwriter', TType.STRING, 8)
      oprot.writeString(self.scriptwriter)
      oprot.writeFieldEnd()
    if self.actor is not None:
      oprot.writeFieldBegin('actor', TType.STRING, 9)
      oprot.writeString(self.actor)
      oprot.writeFieldEnd()
    if self.director is not None:
      oprot.writeFieldBegin('director', TType.STRING, 10)
      oprot.writeString(self.director)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 11)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.imdb is not None:
      oprot.writeFieldBegin('imdb', TType.STRING, 12)
      oprot.writeString(self.imdb)
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.STRING, 13)
      oprot.writeString(self.year)
      oprot.writeFieldEnd()
    if self.genre is not None:
      oprot.writeFieldBegin('genre', TType.STRING, 14)
      oprot.writeString(self.genre)
      oprot.writeFieldEnd()
    if self.runtime is not None:
      oprot.writeFieldBegin('runtime', TType.STRING, 15)
      oprot.writeString(self.runtime)
      oprot.writeFieldEnd()
    if self.moviename is not None:
      oprot.writeFieldBegin('moviename', TType.STRING, 16)
      oprot.writeString(self.moviename)
      oprot.writeFieldEnd()
    if self.otherName is not None:
      oprot.writeFieldBegin('otherName', TType.STRING, 17)
      oprot.writeString(self.otherName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
