/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef store_service_H
#define store_service_H

#include <TProcessor.h>
#include "store_types.h"



class store_serviceIf {
 public:
  virtual ~store_serviceIf() {}
  virtual int32_t put(const movie_info& info) = 0;
};

class store_serviceIfFactory {
 public:
  typedef store_serviceIf Handler;

  virtual ~store_serviceIfFactory() {}

  virtual store_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(store_serviceIf* /* handler */) = 0;
};

class store_serviceIfSingletonFactory : virtual public store_serviceIfFactory {
 public:
  store_serviceIfSingletonFactory(const boost::shared_ptr<store_serviceIf>& iface) : iface_(iface) {}
  virtual ~store_serviceIfSingletonFactory() {}

  virtual store_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(store_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<store_serviceIf> iface_;
};

class store_serviceNull : virtual public store_serviceIf {
 public:
  virtual ~store_serviceNull() {}
  int32_t put(const movie_info& /* info */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _store_service_put_args__isset {
  _store_service_put_args__isset() : info(false) {}
  bool info;
} _store_service_put_args__isset;

class store_service_put_args {
 public:

  store_service_put_args() {
  }

  virtual ~store_service_put_args() throw() {}

  movie_info info;

  _store_service_put_args__isset __isset;

  void __set_info(const movie_info& val) {
    info = val;
  }

  bool operator == (const store_service_put_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const store_service_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const store_service_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class store_service_put_pargs {
 public:


  virtual ~store_service_put_pargs() throw() {}

  const movie_info* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _store_service_put_result__isset {
  _store_service_put_result__isset() : success(false) {}
  bool success;
} _store_service_put_result__isset;

class store_service_put_result {
 public:

  store_service_put_result() : success(0) {
  }

  virtual ~store_service_put_result() throw() {}

  int32_t success;

  _store_service_put_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const store_service_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const store_service_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const store_service_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _store_service_put_presult__isset {
  _store_service_put_presult__isset() : success(false) {}
  bool success;
} _store_service_put_presult__isset;

class store_service_put_presult {
 public:


  virtual ~store_service_put_presult() throw() {}

  int32_t* success;

  _store_service_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class store_serviceClient : virtual public store_serviceIf {
 public:
  store_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  store_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t put(const movie_info& info);
  void send_put(const movie_info& info);
  int32_t recv_put();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class store_serviceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<store_serviceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (store_serviceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_put(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  store_serviceProcessor(boost::shared_ptr<store_serviceIf> iface) :
    iface_(iface) {
    processMap_["put"] = &store_serviceProcessor::process_put;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~store_serviceProcessor() {}
};

class store_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  store_serviceProcessorFactory(const ::boost::shared_ptr< store_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< store_serviceIfFactory > handlerFactory_;
};

class store_serviceMultiface : virtual public store_serviceIf {
 public:
  store_serviceMultiface(std::vector<boost::shared_ptr<store_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~store_serviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<store_serviceIf> > ifaces_;
  store_serviceMultiface() {}
  void add(boost::shared_ptr<store_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t put(const movie_info& info) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->put(info);
      } else {
        ifaces_[i]->put(info);
      }
    }
  }

};



#endif
