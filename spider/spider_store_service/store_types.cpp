/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "store_types.h"



const char* movie_info::ascii_fingerprint = "688282B71FF98E0878AB889F853474AE";
const uint8_t movie_info::binary_fingerprint[16] = {0x68,0x82,0x82,0xB7,0x1F,0xF9,0x8E,0x08,0x78,0xAB,0x88,0x9F,0x85,0x34,0x74,0xAE};

uint32_t movie_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->movienum);
          this->__isset.movienum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->initial_release_date);
          this->__isset.initial_release_date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->big_poster);
          this->__isset.big_poster = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->small_poster);
          this->__isset.small_poster = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          this->__isset.language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->area);
          this->__isset.area = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->scriptwriter);
          this->__isset.scriptwriter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor);
          this->__isset.actor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->director);
          this->__isset.director = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->source);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imdb);
          this->__isset.imdb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->year);
          this->__isset.year = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->genre);
          this->__isset.genre = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->runtime);
          this->__isset.runtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->moviename);
          this->__isset.moviename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->otherName);
          this->__isset.otherName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t movie_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("movie_info");
  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("movienum", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->movienum);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("initial_release_date", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->initial_release_date);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("big_poster", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->big_poster);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("small_poster", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->small_poster);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("area", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->area);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("scriptwriter", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->scriptwriter);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("actor", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->actor);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("director", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->director);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->source);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("imdb", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->imdb);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("year", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->year);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("genre", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->genre);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("runtime", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->runtime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("moviename", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->moviename);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("otherName", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->otherName);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


