/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef store_TYPES_H
#define store_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _movie_info__isset {
  _movie_info__isset() : url(false), movienum(false), initial_release_date(false), big_poster(false), small_poster(false), language(false), area(false), scriptwriter(false), actor(false), director(false), source(false), imdb(false), year(false), genre(false), runtime(false), moviename(false), otherName(false) {}
  bool url;
  bool movienum;
  bool initial_release_date;
  bool big_poster;
  bool small_poster;
  bool language;
  bool area;
  bool scriptwriter;
  bool actor;
  bool director;
  bool source;
  bool imdb;
  bool year;
  bool genre;
  bool runtime;
  bool moviename;
  bool otherName;
} _movie_info__isset;

class movie_info {
 public:

  static const char* ascii_fingerprint; // = "688282B71FF98E0878AB889F853474AE";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x82,0x82,0xB7,0x1F,0xF9,0x8E,0x08,0x78,0xAB,0x88,0x9F,0x85,0x34,0x74,0xAE};

  movie_info() : url(""), movienum(""), initial_release_date(""), big_poster(""), small_poster(""), language(""), area(""), scriptwriter(""), actor(""), director(""), source(""), imdb(""), year(""), genre(""), runtime(""), moviename(""), otherName("") {
  }

  virtual ~movie_info() throw() {}

  std::string url;
  std::string movienum;
  std::string initial_release_date;
  std::string big_poster;
  std::string small_poster;
  std::string language;
  std::string area;
  std::string scriptwriter;
  std::string actor;
  std::string director;
  std::string source;
  std::string imdb;
  std::string year;
  std::string genre;
  std::string runtime;
  std::string moviename;
  std::string otherName;

  _movie_info__isset __isset;

  void __set_url(const std::string& val) {
    url = val;
  }

  void __set_movienum(const std::string& val) {
    movienum = val;
  }

  void __set_initial_release_date(const std::string& val) {
    initial_release_date = val;
  }

  void __set_big_poster(const std::string& val) {
    big_poster = val;
  }

  void __set_small_poster(const std::string& val) {
    small_poster = val;
  }

  void __set_language(const std::string& val) {
    language = val;
  }

  void __set_area(const std::string& val) {
    area = val;
  }

  void __set_scriptwriter(const std::string& val) {
    scriptwriter = val;
  }

  void __set_actor(const std::string& val) {
    actor = val;
  }

  void __set_director(const std::string& val) {
    director = val;
  }

  void __set_source(const std::string& val) {
    source = val;
  }

  void __set_imdb(const std::string& val) {
    imdb = val;
  }

  void __set_year(const std::string& val) {
    year = val;
  }

  void __set_genre(const std::string& val) {
    genre = val;
  }

  void __set_runtime(const std::string& val) {
    runtime = val;
  }

  void __set_moviename(const std::string& val) {
    moviename = val;
  }

  void __set_otherName(const std::string& val) {
    otherName = val;
  }

  bool operator == (const movie_info & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(movienum == rhs.movienum))
      return false;
    if (!(initial_release_date == rhs.initial_release_date))
      return false;
    if (!(big_poster == rhs.big_poster))
      return false;
    if (!(small_poster == rhs.small_poster))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(area == rhs.area))
      return false;
    if (!(scriptwriter == rhs.scriptwriter))
      return false;
    if (!(actor == rhs.actor))
      return false;
    if (!(director == rhs.director))
      return false;
    if (!(source == rhs.source))
      return false;
    if (!(imdb == rhs.imdb))
      return false;
    if (!(year == rhs.year))
      return false;
    if (!(genre == rhs.genre))
      return false;
    if (!(runtime == rhs.runtime))
      return false;
    if (!(moviename == rhs.moviename))
      return false;
    if (!(otherName == rhs.otherName))
      return false;
    return true;
  }
  bool operator != (const movie_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const movie_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
